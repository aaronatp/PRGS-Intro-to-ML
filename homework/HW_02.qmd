---
title: "Homework 2"
format: html
---

__Due Date:__ 2022-10-16 at 8:30 AM PT
---


__Name:__ Aaron Presser



For this assignment, you will practice downloadings, cleaning, and analyzing data from the [National Risk Index (NRI)](https://hazards.fema.gov/nri/) and the [CDC Social Vulnerability Index (SVI)](https://www.atsdr.cdc.gov/placeandhealth/svi/index.html).

## Preparation

1. Create a 'data' folder in the root directory of your repository.
1. Inside the 'data' folder, create a 'raw' folder.
1. Add and commit a '.gitignore' file to the root directory of this repository that excludes all contents of the 'data' folder.
1. Download the county-level NRI and SVI data for the entire United States. Place the data in the 'data/raw' folder.
1. In the repository README, provide a brief (1-2 sentence) description of each file in the 'data' folder and a link to the original source of the data.

## Task 1 - NRI Data Cleaning

__1. Import the NRI data. Ensure that the [FIPS code](https://en.wikipedia.org/wiki/Federal_Information_Processing_Standard_state_code) variable ('STCOFIPS') is correctly identified as a string / character variable. Otherwise, the leading zeros will be removed.__

```{python}
import pandas as pd
import matplotlib.pyplot as plt

nri_data = r"/Users/aaronpresser/Downloads/PRGS-Intro-to-Machine-Learning/data/raw/National Risk Index (NRI) County Level Data\NRI_Table_Counties.csv"
nri_df = pd.read_csv(nri_data)
```

__2. Subset the NRI data to include only the 5-digit state/county FIPS code and all colums ending with '\_AFREQ' and '\_RISKR'. Each of these columns represents a different hazard type.__

```{python}
nri_df['STCOFIPS'] = nri_df['STCOFIPS'].astype(str)
stcofips_column = 'STCOFIPS'

filtered_nri = nri_df.filter(regex='(_AFREQ|_RISKR)$').columns
filtered_nri = [stcofips_column] + list(filtered_nri)

subset_nri = nri_df[filtered_nri]
subset_nri = subset_nri[subset_nri[stcofips_column].astype(str).str.match(r'^\d{5}$')]
```
__3. Create a table / dataframe that, for each hazard type, shows the number of missing values in the '\_AFREQ' and '\_RISKR' columns.__
```{python}
def count_missing(df):
    return df.isna().sum()

count_missing_subset_nri = count_missing(subset_nri)
count_missing_subset_nri = count_missing_subset_nri.drop('STCOFIPS')
count_missing_subset_nri = pd.DataFrame(count_missing_subset_nri)
```
__4. Create a new column in the original data table indicating whether or not 'AVLN_AFREQ' is missing or observed. Show the cross-tabulation of the 'AVLN_AFREQ' missingness and 'AVLN_RISKR' columns (including missing values). What do you observe?__
```{python}
crosstab_df=pd.crosstab(
    subset_nri['AVLN_AFREQ'],
    subset_nri['AVLN_RISKR'],
    dropna=False
)

cols1 = [col for col in subset_nri.columns if col.endswith('_AFREQ')]
cols2 = [col for col in subset_nri.columns if col.endswith('_RISKR')]
```
__5. Assuming that a risk that is "not applicable" to a county has an annualized frequency of 0, impute the relevant missing values in the '\_AFREQ' columns with 0.__
```{python}
for cols2, cols1 in zip(cols2, cols1):
    subset_nri.loc[subset_nri[cols2] == 'Not Applicable', cols1] = 0
```


## Task 2 - SVI Data Cleaning

__1. Import the SVI data. Ensure that the FIPS code is correctly identified as a string / character variable. Otherwise, the leading zeros will be removed.__
__1. Subset the SVI data to include only the following columns:__
`ST, STATE, ST_ABBR, STCNTY, COUNTY, FIPS, LOCATION, AREA_SQMI, E_TOTPOP, EP_POV150, EP_UNEMP, EP_HBURD, EP_NOHSDP, EP_UNINSUR, EP_AGE65, EP_AGE17, EP_DISABL, EP_SNGPNT, EP_LIMENG, EP_MINRTY, EP_MUNIT, EP_MOBILE, EP_CROWD, EP_NOVEH, EP_GROUPQ, EP_NOINT, EP_AFAM, EP_HISP, EP_ASIAN, EP_AIAN, EP_NHPI, EP_TWOMORE, EP_OTHERRACE`
```{python}
svi_data= r"/Users/aaronpresser/Downloads/PRGS-Intro-to-Machine-Learning/data/raw/Social Vulnerability Index (SVI) County Level Data/SVI_2022_US_county.csv"
svi_df=pd.read_csv(svi_data)
svi_df['FIPS'] = svi_df['FIPS'].astype(str)

svi_columns = columns_to_select = [
    'ST', 'STATE', 'ST_ABBR', 'STCNTY', 'COUNTY', 'FIPS', 'LOCATION', 'AREA_SQMI',
    'E_TOTPOP', 'EP_POV150', 'EP_UNEMP', 'EP_HBURD', 'EP_NOHSDP', 'EP_UNINSUR', 'EP_AGE65',
    'EP_AGE17', 'EP_DISABL', 'EP_SNGPNT', 'EP_LIMENG', 'EP_MINRTY', 'EP_MUNIT', 'EP_MOBILE',
    'EP_CROWD', 'EP_NOVEH', 'EP_GROUPQ', 'EP_NOINT', 'EP_AFAM', 'EP_HISP', 'EP_ASIAN',
    'EP_AIAN', 'EP_NHPI', 'EP_TWOMORE', 'EP_OTHERRACE'
]

filtered_svi=svi_df[svi_columns]
```
__2. Create a table / dataframe that shows the number of missing values in each column.
(Hint: if you wrote a function for Task 1, you can reuse it here.)__

```{python}
svi_missing=count_missing(filtered_svi)
svi_missing_df=pd.DataFrame(svi_missing)
print(svi_missing_df)
```

## Task 3 - Data Merging
__1. Identify any FIPS codes that are present in the NRI data but not in the SVI data and vice versa. Describe any discrepancies and possible causes? What to these discrepancies, if any, mean for interpreting results based on the merged dataset moving forward?__
```{python}
#The NRI dataset has 3 FIPS columns, one for state, one for county, and one for a combination of both, called state county (STCO). The SVI data has one column named FIPS and another column named STCNTY (State County) which can be interpreted in the same way as the STCOFIPS column from the NRI data and we should keep this in mind moving forward as we can use this as a key to merge our datasets
```
__2. Merge the NRI and SVI data on the FIPS code. Use an outer join to keep all counties in the final dataset.__
```{python}
merged_nri_svi=pd.merge(subset_nri, filtered_svi, how='outer', left_on='STCOFIPS', right_on='FIPS')
missing_merged=count_missing(merged_nri_svi)
missing_merged_df=pd.DataFrame(missing_merged)
```
__3. Create a table / dataframe that shows the number of missing values in each column of the merged dataset.__

```{python}
missing_merged_df.isnull().sum().to_frame(name="Missing Values")
```

## Task 4 - Data Analysis

__1. For each numerical variable in the merged dataset, plot a histogram showing the distribution of values.
(Hint: write a function to make the histogram for a single variable, then use a loop or apply function to make the histograms for all numerical variables.)__
```{python}
def plot_histogram(data, bins=10, title='Histogram', xlabel='Values', ylabel='Frequency'):
    plt.figure(figsize=(8, 6))
    plt.hist(data, bins=bins, edgecolor='black')

    plt.title(title)
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)

    plt.show()

hist_test = plot_histogram(merged_nri_svi['EP_MINRTY'])
selecting_numerical_variables = merged_nri_svi.select_dtypes(include=['number'])
apply_hist = selecting_numerical_variables.apply(plot_histogram)
```
